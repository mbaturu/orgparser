apply plugin: 'java'
apply plugin: 'pmd'
apply plugin: 'info.solidsoft.pitest'
// must be applied after your artifact generating plugin (eg. java /
// com.android.library)
//apply plugin: 'bintray-release'

// query git for the Tag. Use this to automate versioning.
def gitTag = 'git describe --tags'.execute([], project.rootDir).text.trim()

// Needed for pitest
group = "org.cowboyprogrammer"

dependencies {
    compile 'joda-time:joda-time:2.3'
    testCompile 'junit:junit:4.12'
}

/*
publish {
    groupId = 'org.cowboyprogrammer'
    artifactId = 'orgparser'
    publishVersion = gitTag
    description = 'A java library for parsing Org-mode files.'
    website = 'https://github.com/spacecowboy/orgparser'
    licences = ['GPL-3.0']
    uploadName = 'org.cowboyprogrammer:orgparser'
    bintrayUser = project.hasProperty("BINTRAY_USER") ? BINTRAY_USER : "Dummy"
    bintrayKey = project.hasProperty("BINTRAY_KEY") ? BINTRAY_KEY : "Dummy"
}
*/
pitest {
  threads = 4
  outputFormats = ['XML', 'HTML']
}

test {
  testLogging {
    // Make sure output from
    // standard out or error is shown
    // in Gradle output.
    showStandardStreams = false

    // Or we use events method:
    // events 'standard_out', 'standard_error'

    // Or set property events:
    // events = ['standard_out', 'standard_error']

    // Instead of string values we can
    // use enum values:
    // events org.gradle.api.tasks.testing.logging.TestLogEvent.STANDARD_OUT,
    //        org.gradle.api.tasks.testing.logging.TestLogEvent.STANDARD_ERROR,
  }
}
